{"version":3,"sources":["Card.js","App.js","reportWebVitals.js","index.js"],"names":["STATE","Scorecard","props","useState","JSON","parse","localStorage","getItem","Array","fill","pars","setPars","useEffect","setItem","stringify","Immutable","List","players","setPlayers","newScore","Map","scores","setScores","newPlayer","setNewPlayer","newPlayerError","setNewPlayerError","getScores","hole","elems","forEach","player","push","type","className","value","get","onChange","evt","score","newScores","has","set","updateScores","parseInt","target","getPlayers","rowSpan","onClick","range","map","i","par","newPars","updatePars","reduce","sum","elem","finalScore","playerScores","every","getFinalScores","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.19064506.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport range from 'lodash/range';\nimport Immutable from 'immutable';\nimport './Card.css';\n\nconst STATE = {\n  PARS: 'pars',\n  SCORES: 'scores',\n  PLAYERS: 'players'\n}\n\nexport function Scorecard(props) {\n\n  // local storage items\n  const [pars, setPars] = useState(JSON.parse(localStorage.getItem(STATE.PARS)) || Array(18).fill(3));\n  useEffect(() => {\n    localStorage.setItem(STATE.PARS, JSON.stringify(pars));\n  }, [pars]);\n\n  const [players, setPlayers] = useState(Immutable.List(JSON.parse(localStorage.getItem(STATE.PLAYERS))) || Immutable.List());\n  useEffect(() => {\n    localStorage.setItem(STATE.PLAYERS, JSON.stringify(players));\n  }, [players]);\n\n  const newScore = {};\n  const [scores, setScores] = useState(Immutable.Map(JSON.parse(localStorage.getItem(STATE.SCORES))) || Immutable.Map(newScore));\n  useEffect(() => {\n    localStorage.setItem(STATE.SCORES, JSON.stringify(scores));\n  }, [scores]);\n\n  const [newPlayer, setNewPlayer] = useState('');\n  const [newPlayerError, setNewPlayerError] = useState('');\n\n  function getPlayers() {\n    const elems = [];\n    players.forEach(player => {\n      elems.push(<th>{player}</th>);\n    });\n    return elems;\n  }\n\n  function updatePars(hole, par) {\n    const newPars = [...pars];\n    newPars[hole] = par;\n    setPars(newPars);\n  }\n\n  function getScores(hole) {\n    const elems = [];\n    players.forEach(player => {\n      elems.push(\n        <td>\n          <input \n            type=\"number\"\n            className=\"score\" \n            value={scores.get(player)?.[hole] || ''}\n            onChange={evt => updateScores(hole, player, parseInt(evt.target.value))}>\n          </input>\n        </td>);\n    });\n    return elems;\n  }\n\n  function updateScores(hole, player, score) {\n    let newScores;\n    if (scores.has(player)) {\n      newScores = [...scores.get(player)];\n    } else {\n      newScores = Array(18).fill(0);\n    }\n    newScores[hole] = score;\n    setScores(scores.set(player, newScores));\n  }\n\n  function getFinalScores() {\n    const elems = [];\n    players.forEach(player => {\n      const playerScores = scores.get(player);\n      let finalScore;\n      if (!playerScores || playerScores.every(elem => !elem)) {\n        finalScore = '';\n      } else {\n        finalScore = playerScores.reduce((sum, elem) => sum + elem, 0);\n      }\n\n      elems.push(\n        <td>\n          { finalScore }\n        </td>\n      );\n    });\n    return elems;\n  }\n\n  function addNewPlayer() {\n    if (newPlayer) {\n      // add new player\n      setPlayers(players.push(newPlayer));\n\n      // reset new player UI\n      setNewPlayer(\"\")\n      setNewPlayerError(\"\");\n    } else {\n      setNewPlayerError(\"Please enter a name!\");\n    }\n  }\n\n  function reset() {\n    setPars(Array(18).fill(3)); \n    setScores(Immutable.Map(newScore));\n    setPlayers(Immutable.List());\n    setNewPlayer(\"\");\n    setNewPlayerError(\"\");\n  }\n\n  return (\n    <div>\n    <table>\n      <tbody>\n      <tr>\n        <th>Hole</th>\n        <th>Par</th>\n        { getPlayers() }\n        <th rowSpan=\"0\" className=\"addPlayerCol\">\n          <input\n            type=\"text\"\n            className=\"playerName\"\n            value={newPlayer}\n            onChange={evt => setNewPlayer(evt.target.value)}></input><br/>\n          <button className=\"addPlayer\" onClick={addNewPlayer}>Add Player</button><br/>\n          <p className=\"addPlayerError\">{newPlayerError}</p>\n        </th>\n      </tr>\n      { \n        range(0, 18).map(i => \n          <tr>\n            <td>{i + 1}</td>\n            <td>\n              <input \n                type=\"number\" \n                className=\"score\" \n                value={pars[i] || ''}\n                onChange={evt => updatePars(i, parseInt(evt.target.value))}\n                ></input>\n              </td>\n            { getScores(i) }\n          </tr>\n        )\n      } \n      <tr>\n        <td>Final</td>\n        <td>\n          { pars.reduce((sum, elem) => sum + elem, 0) || '' }\n        </td>\n        { getFinalScores() }\n      </tr>\n      </tbody>\n    </table>\n    <button className=\"reset\" onClick={reset}>Reset</button>\n    </div>\n  )\n}","import './App.css';\nimport { Scorecard } from './Card';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Scorecard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}